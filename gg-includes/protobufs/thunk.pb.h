// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thunk.proto

#ifndef PROTOBUF_thunk_2eproto__INCLUDED
#define PROTOBUF_thunk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gg {
namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_thunk_2eproto();
void protobuf_AssignDesc_thunk_2eproto();
void protobuf_ShutdownFile_thunk_2eproto();

class Function;
class Thunk;

// ===================================================================

class Function : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gg.protobuf.Function) */ {
 public:
  Function();
  virtual ~Function();

  Function(const Function& from);

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Function& default_instance();

  void Swap(Function* other);

  // implements Message ----------------------------------------------

  inline Function* New() const { return New(NULL); }

  Function* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Function* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // repeated string args = 2;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // repeated string envars = 3;
  int envars_size() const;
  void clear_envars();
  static const int kEnvarsFieldNumber = 3;
  const ::std::string& envars(int index) const;
  ::std::string* mutable_envars(int index);
  void set_envars(int index, const ::std::string& value);
  void set_envars(int index, const char* value);
  void set_envars(int index, const char* value, size_t size);
  ::std::string* add_envars();
  void add_envars(const ::std::string& value);
  void add_envars(const char* value);
  void add_envars(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& envars() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_envars();

  // @@protoc_insertion_point(class_scope:gg.protobuf.Function)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::RepeatedPtrField< ::std::string> envars_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_thunk_2eproto();
  friend void protobuf_AssignDesc_thunk_2eproto();
  friend void protobuf_ShutdownFile_thunk_2eproto();

  void InitAsDefaultInstance();
  static Function* default_instance_;
};
// -------------------------------------------------------------------

class Thunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gg.protobuf.Thunk) */ {
 public:
  Thunk();
  virtual ~Thunk();

  Thunk(const Thunk& from);

  inline Thunk& operator=(const Thunk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Thunk& default_instance();

  void Swap(Thunk* other);

  // implements Message ----------------------------------------------

  inline Thunk* New() const { return New(NULL); }

  Thunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Thunk& from);
  void MergeFrom(const Thunk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Thunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gg.protobuf.Function function = 1;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::gg::protobuf::Function& function() const;
  ::gg::protobuf::Function* mutable_function();
  ::gg::protobuf::Function* release_function();
  void set_allocated_function(::gg::protobuf::Function* function);

  // repeated string values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // repeated string thunks = 3;
  int thunks_size() const;
  void clear_thunks();
  static const int kThunksFieldNumber = 3;
  const ::std::string& thunks(int index) const;
  ::std::string* mutable_thunks(int index);
  void set_thunks(int index, const ::std::string& value);
  void set_thunks(int index, const char* value);
  void set_thunks(int index, const char* value, size_t size);
  ::std::string* add_thunks();
  void add_thunks(const ::std::string& value);
  void add_thunks(const char* value);
  void add_thunks(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& thunks() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_thunks();

  // repeated string futures = 7;
  int futures_size() const;
  void clear_futures();
  static const int kFuturesFieldNumber = 7;
  const ::std::string& futures(int index) const;
  ::std::string* mutable_futures(int index);
  void set_futures(int index, const ::std::string& value);
  void set_futures(int index, const char* value);
  void set_futures(int index, const char* value, size_t size);
  ::std::string* add_futures();
  void add_futures(const ::std::string& value);
  void add_futures(const char* value);
  void add_futures(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& futures() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_futures();

  // repeated string executables = 4;
  int executables_size() const;
  void clear_executables();
  static const int kExecutablesFieldNumber = 4;
  const ::std::string& executables(int index) const;
  ::std::string* mutable_executables(int index);
  void set_executables(int index, const ::std::string& value);
  void set_executables(int index, const char* value);
  void set_executables(int index, const char* value, size_t size);
  ::std::string* add_executables();
  void add_executables(const ::std::string& value);
  void add_executables(const char* value);
  void add_executables(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& executables() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_executables();

  // repeated string outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 5;
  const ::std::string& outputs(int index) const;
  ::std::string* mutable_outputs(int index);
  void set_outputs(int index, const ::std::string& value);
  void set_outputs(int index, const char* value);
  void set_outputs(int index, const char* value, size_t size);
  ::std::string* add_outputs();
  void add_outputs(const ::std::string& value);
  void add_outputs(const char* value);
  void add_outputs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& outputs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_outputs();

  // optional uint32 timeout = 6;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 6;
  ::google::protobuf::uint32 timeout() const;
  void set_timeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gg.protobuf.Thunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gg::protobuf::Function* function_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::RepeatedPtrField< ::std::string> thunks_;
  ::google::protobuf::RepeatedPtrField< ::std::string> futures_;
  ::google::protobuf::RepeatedPtrField< ::std::string> executables_;
  ::google::protobuf::RepeatedPtrField< ::std::string> outputs_;
  ::google::protobuf::uint32 timeout_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_thunk_2eproto();
  friend void protobuf_AssignDesc_thunk_2eproto();
  friend void protobuf_ShutdownFile_thunk_2eproto();

  void InitAsDefaultInstance();
  static Thunk* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Function

// optional string hash = 1;
inline void Function::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Function::hash() const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Function.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gg.protobuf.Function.hash)
}
inline void Function::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gg.protobuf.Function.hash)
}
inline void Function::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gg.protobuf.Function.hash)
}
inline ::std::string* Function::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Function.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Function::release_hash() {
  // @@protoc_insertion_point(field_release:gg.protobuf.Function.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:gg.protobuf.Function.hash)
}

// repeated string args = 2;
inline int Function::args_size() const {
  return args_.size();
}
inline void Function::clear_args() {
  args_.Clear();
}
inline const ::std::string& Function::args(int index) const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Function.args)
  return args_.Get(index);
}
inline ::std::string* Function::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Function.args)
  return args_.Mutable(index);
}
inline void Function::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gg.protobuf.Function.args)
  args_.Mutable(index)->assign(value);
}
inline void Function::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gg.protobuf.Function.args)
}
inline void Function::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gg.protobuf.Function.args)
}
inline ::std::string* Function::add_args() {
  // @@protoc_insertion_point(field_add_mutable:gg.protobuf.Function.args)
  return args_.Add();
}
inline void Function::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gg.protobuf.Function.args)
}
inline void Function::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gg.protobuf.Function.args)
}
inline void Function::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gg.protobuf.Function.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Function::args() const {
  // @@protoc_insertion_point(field_list:gg.protobuf.Function.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Function::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:gg.protobuf.Function.args)
  return &args_;
}

// repeated string envars = 3;
inline int Function::envars_size() const {
  return envars_.size();
}
inline void Function::clear_envars() {
  envars_.Clear();
}
inline const ::std::string& Function::envars(int index) const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Function.envars)
  return envars_.Get(index);
}
inline ::std::string* Function::mutable_envars(int index) {
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Function.envars)
  return envars_.Mutable(index);
}
inline void Function::set_envars(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gg.protobuf.Function.envars)
  envars_.Mutable(index)->assign(value);
}
inline void Function::set_envars(int index, const char* value) {
  envars_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gg.protobuf.Function.envars)
}
inline void Function::set_envars(int index, const char* value, size_t size) {
  envars_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gg.protobuf.Function.envars)
}
inline ::std::string* Function::add_envars() {
  // @@protoc_insertion_point(field_add_mutable:gg.protobuf.Function.envars)
  return envars_.Add();
}
inline void Function::add_envars(const ::std::string& value) {
  envars_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gg.protobuf.Function.envars)
}
inline void Function::add_envars(const char* value) {
  envars_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gg.protobuf.Function.envars)
}
inline void Function::add_envars(const char* value, size_t size) {
  envars_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gg.protobuf.Function.envars)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Function::envars() const {
  // @@protoc_insertion_point(field_list:gg.protobuf.Function.envars)
  return envars_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Function::mutable_envars() {
  // @@protoc_insertion_point(field_mutable_list:gg.protobuf.Function.envars)
  return &envars_;
}

// -------------------------------------------------------------------

// Thunk

// optional .gg.protobuf.Function function = 1;
inline bool Thunk::has_function() const {
  return !_is_default_instance_ && function_ != NULL;
}
inline void Thunk::clear_function() {
  if (GetArenaNoVirtual() == NULL && function_ != NULL) delete function_;
  function_ = NULL;
}
inline const ::gg::protobuf::Function& Thunk::function() const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Thunk.function)
  return function_ != NULL ? *function_ : *default_instance_->function_;
}
inline ::gg::protobuf::Function* Thunk::mutable_function() {
  
  if (function_ == NULL) {
    function_ = new ::gg::protobuf::Function;
  }
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Thunk.function)
  return function_;
}
inline ::gg::protobuf::Function* Thunk::release_function() {
  // @@protoc_insertion_point(field_release:gg.protobuf.Thunk.function)
  
  ::gg::protobuf::Function* temp = function_;
  function_ = NULL;
  return temp;
}
inline void Thunk::set_allocated_function(::gg::protobuf::Function* function) {
  delete function_;
  function_ = function;
  if (function) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gg.protobuf.Thunk.function)
}

// repeated string values = 2;
inline int Thunk::values_size() const {
  return values_.size();
}
inline void Thunk::clear_values() {
  values_.Clear();
}
inline const ::std::string& Thunk::values(int index) const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Thunk.values)
  return values_.Get(index);
}
inline ::std::string* Thunk::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Thunk.values)
  return values_.Mutable(index);
}
inline void Thunk::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gg.protobuf.Thunk.values)
  values_.Mutable(index)->assign(value);
}
inline void Thunk::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gg.protobuf.Thunk.values)
}
inline void Thunk::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gg.protobuf.Thunk.values)
}
inline ::std::string* Thunk::add_values() {
  // @@protoc_insertion_point(field_add_mutable:gg.protobuf.Thunk.values)
  return values_.Add();
}
inline void Thunk::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gg.protobuf.Thunk.values)
}
inline void Thunk::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gg.protobuf.Thunk.values)
}
inline void Thunk::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gg.protobuf.Thunk.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Thunk::values() const {
  // @@protoc_insertion_point(field_list:gg.protobuf.Thunk.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Thunk::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:gg.protobuf.Thunk.values)
  return &values_;
}

// repeated string thunks = 3;
inline int Thunk::thunks_size() const {
  return thunks_.size();
}
inline void Thunk::clear_thunks() {
  thunks_.Clear();
}
inline const ::std::string& Thunk::thunks(int index) const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Thunk.thunks)
  return thunks_.Get(index);
}
inline ::std::string* Thunk::mutable_thunks(int index) {
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Thunk.thunks)
  return thunks_.Mutable(index);
}
inline void Thunk::set_thunks(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gg.protobuf.Thunk.thunks)
  thunks_.Mutable(index)->assign(value);
}
inline void Thunk::set_thunks(int index, const char* value) {
  thunks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gg.protobuf.Thunk.thunks)
}
inline void Thunk::set_thunks(int index, const char* value, size_t size) {
  thunks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gg.protobuf.Thunk.thunks)
}
inline ::std::string* Thunk::add_thunks() {
  // @@protoc_insertion_point(field_add_mutable:gg.protobuf.Thunk.thunks)
  return thunks_.Add();
}
inline void Thunk::add_thunks(const ::std::string& value) {
  thunks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gg.protobuf.Thunk.thunks)
}
inline void Thunk::add_thunks(const char* value) {
  thunks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gg.protobuf.Thunk.thunks)
}
inline void Thunk::add_thunks(const char* value, size_t size) {
  thunks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gg.protobuf.Thunk.thunks)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Thunk::thunks() const {
  // @@protoc_insertion_point(field_list:gg.protobuf.Thunk.thunks)
  return thunks_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Thunk::mutable_thunks() {
  // @@protoc_insertion_point(field_mutable_list:gg.protobuf.Thunk.thunks)
  return &thunks_;
}

// repeated string futures = 7;
inline int Thunk::futures_size() const {
  return futures_.size();
}
inline void Thunk::clear_futures() {
  futures_.Clear();
}
inline const ::std::string& Thunk::futures(int index) const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Thunk.futures)
  return futures_.Get(index);
}
inline ::std::string* Thunk::mutable_futures(int index) {
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Thunk.futures)
  return futures_.Mutable(index);
}
inline void Thunk::set_futures(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gg.protobuf.Thunk.futures)
  futures_.Mutable(index)->assign(value);
}
inline void Thunk::set_futures(int index, const char* value) {
  futures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gg.protobuf.Thunk.futures)
}
inline void Thunk::set_futures(int index, const char* value, size_t size) {
  futures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gg.protobuf.Thunk.futures)
}
inline ::std::string* Thunk::add_futures() {
  // @@protoc_insertion_point(field_add_mutable:gg.protobuf.Thunk.futures)
  return futures_.Add();
}
inline void Thunk::add_futures(const ::std::string& value) {
  futures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gg.protobuf.Thunk.futures)
}
inline void Thunk::add_futures(const char* value) {
  futures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gg.protobuf.Thunk.futures)
}
inline void Thunk::add_futures(const char* value, size_t size) {
  futures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gg.protobuf.Thunk.futures)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Thunk::futures() const {
  // @@protoc_insertion_point(field_list:gg.protobuf.Thunk.futures)
  return futures_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Thunk::mutable_futures() {
  // @@protoc_insertion_point(field_mutable_list:gg.protobuf.Thunk.futures)
  return &futures_;
}

// repeated string executables = 4;
inline int Thunk::executables_size() const {
  return executables_.size();
}
inline void Thunk::clear_executables() {
  executables_.Clear();
}
inline const ::std::string& Thunk::executables(int index) const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Thunk.executables)
  return executables_.Get(index);
}
inline ::std::string* Thunk::mutable_executables(int index) {
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Thunk.executables)
  return executables_.Mutable(index);
}
inline void Thunk::set_executables(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gg.protobuf.Thunk.executables)
  executables_.Mutable(index)->assign(value);
}
inline void Thunk::set_executables(int index, const char* value) {
  executables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gg.protobuf.Thunk.executables)
}
inline void Thunk::set_executables(int index, const char* value, size_t size) {
  executables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gg.protobuf.Thunk.executables)
}
inline ::std::string* Thunk::add_executables() {
  // @@protoc_insertion_point(field_add_mutable:gg.protobuf.Thunk.executables)
  return executables_.Add();
}
inline void Thunk::add_executables(const ::std::string& value) {
  executables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gg.protobuf.Thunk.executables)
}
inline void Thunk::add_executables(const char* value) {
  executables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gg.protobuf.Thunk.executables)
}
inline void Thunk::add_executables(const char* value, size_t size) {
  executables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gg.protobuf.Thunk.executables)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Thunk::executables() const {
  // @@protoc_insertion_point(field_list:gg.protobuf.Thunk.executables)
  return executables_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Thunk::mutable_executables() {
  // @@protoc_insertion_point(field_mutable_list:gg.protobuf.Thunk.executables)
  return &executables_;
}

// repeated string outputs = 5;
inline int Thunk::outputs_size() const {
  return outputs_.size();
}
inline void Thunk::clear_outputs() {
  outputs_.Clear();
}
inline const ::std::string& Thunk::outputs(int index) const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Thunk.outputs)
  return outputs_.Get(index);
}
inline ::std::string* Thunk::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:gg.protobuf.Thunk.outputs)
  return outputs_.Mutable(index);
}
inline void Thunk::set_outputs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gg.protobuf.Thunk.outputs)
  outputs_.Mutable(index)->assign(value);
}
inline void Thunk::set_outputs(int index, const char* value) {
  outputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gg.protobuf.Thunk.outputs)
}
inline void Thunk::set_outputs(int index, const char* value, size_t size) {
  outputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gg.protobuf.Thunk.outputs)
}
inline ::std::string* Thunk::add_outputs() {
  // @@protoc_insertion_point(field_add_mutable:gg.protobuf.Thunk.outputs)
  return outputs_.Add();
}
inline void Thunk::add_outputs(const ::std::string& value) {
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gg.protobuf.Thunk.outputs)
}
inline void Thunk::add_outputs(const char* value) {
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gg.protobuf.Thunk.outputs)
}
inline void Thunk::add_outputs(const char* value, size_t size) {
  outputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gg.protobuf.Thunk.outputs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Thunk::outputs() const {
  // @@protoc_insertion_point(field_list:gg.protobuf.Thunk.outputs)
  return outputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Thunk::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:gg.protobuf.Thunk.outputs)
  return &outputs_;
}

// optional uint32 timeout = 6;
inline void Thunk::clear_timeout() {
  timeout_ = 0u;
}
inline ::google::protobuf::uint32 Thunk::timeout() const {
  // @@protoc_insertion_point(field_get:gg.protobuf.Thunk.timeout)
  return timeout_;
}
inline void Thunk::set_timeout(::google::protobuf::uint32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:gg.protobuf.Thunk.timeout)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace gg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_thunk_2eproto__INCLUDED
